name: Build
on:
  push:
    branches-ignore:
      - master
      - main
    tags:
      - "v*"
jobs:
  linux:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: actions/setup-python@v4
        with:
          python-version: '3.8.x'
      - uses: actions/setup-node@v3
        with:
          node-version: '16.x'
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1
      - uses: actions/cache@v3
        id: pip-cache
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-20.04-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-20.04-pip-

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: install dependencies
        shell: bash
        run: |
          echo "LS0tLS1CRUdJTiBQR1AgUFVCTElDIEtFWSBCTE9DSy0tLS0tCgptUUdOQkdXblFpWUJEQUM3YmQwdDZVTzd4c3lYVmt2SlpITTl3K1F4M0Rocm8xbWE5cDhCTjRHSE5pQzRnZHdnClpmc3NLUHVGOHJJWUZkUlRwdSs5cmdHaDRTVWpadGRUQUtZL2xBMjJYOW5FQ3Z5WXZ6ek1JSndqR3JIWnY3U0EKL2VrWm5NK0wzMmtpQzdrSGpzaUZmL1JsaWI5NmVzZzBmNTJxcis2YWw1YW4yMlRNQWxiR1NLeWtyY3R2UUlObwpMMVp2c2M3V1RvSEtOeHM0cXF3U09Cbm8rejc4U3VQbFZpUXcwTTNuQjFNZlBBRjg2QmFuTTdacjUzd3lncTR6CktjYVg1ellKYW94VFdFa1NSZ1ZFYUErcUJYVDJqVHN1VDVHcVg0VHRjUlVOd2xFL285TVJ2M3Y2a3d6WEpFUUEKTXRCaWhsLzNhN3R0ZWE5RGN4VXFoQ0xoZEN5Z21MYnZpUTBreEE1d2dTS3QvNHB5SDBaNXVsWlU1VHpuYkVIKwo1LzhmWE1yb2NLNm84ajFXL1JKQUsvYnhMNkRoNXhleXoycGFneVQ3bjNmY09QRkFTRmQxd21ZMVNZVGVvL1VmCnJsZytWbTBsRmNjUW5VejdOQ3puOUlKSmVHZWVEM04rc1M0YkcxRWVMT1NyVWxsdzdCRlhwbjB5WGM2NVRMcDQKNVh2NGJLOVBhR0dsT2xVQUVRRUFBYlEwVEdWNElFNWxkbUVnS0hSdGNDQnJaWGtnZEc4Z1oyVjBJR2x1YTNOMAphWFJqYUNCclpYa3BJRHhuY0dkQWJHVjRMbWRrUG9rQnpnUVRBUW9BT0JZaEJLUTQ2TkdzVlFXT01CVmVrT0RFCjdiTVZDZEx1QlFKbHAwSW1BaHNEQlFzSkNBY0NCaFVLQ1FnTEFnUVdBZ01CQWg0QkFoZUFBQW9KRU9ERTdiTVYKQ2RMdUVNa0wvMzVybGlGVGJTVnRucGpkQ2RIakc2K2oxb2ZFV3R2ZFFKRTZmRFpydTlKL2lqSm5lQktQS1EwZQo3RFpjWFgzTVl5M0ZISHVXNVlXUDd1Tmh6V2pvTGpoeGhLeXdDRGVmc01BRmhCa0hobnoyNVhVV21QVFVBM2xsClBXc2loTElXU0xlc2crZFlZTFJlYmF0UmNvNU9pWFpVWmJLWTQyUCt6dDB2aEN0OUhOTlhCL2tOOFA1MWRSTlkKV0xSNmdyUlc5dnZENEw3Y0Z1aStDZ2VxSGZxV0U1M2FDbElKeDdac3laaXI2Z21rbk55QXBHbVdHaUZ3SzdVMQpQRXoxNHR1blJmRjE0UXBLTzlJQjBXblVEYnFpdVlRT21ZNWRjZzJwam9YZ20reUEvKzMzZEFUQWpiQWRzUWlKCjJ5NFd3elgwQjZPU2lVdDFmUjJwVGIvakh2SHdWaFJBQXY5UXpKTFgzVlpSZEw1cGdNVHRPbzRMOTVqWG1vQnoKazVPSmFXOHF1NHd6dHNENVFjd2dkMWk1eThGMDhiRnNXanhOcXUrcnRBOGhWaHNxekVmSUthTmNsVzZYZFg4egpYYnFpRWpPdUdja3BOZmdsT29yVnJpWFVFeklTeFZZaUw2WDJWZ013bVQrallCQm8rbllFcVVkbFZJdm8zV3BlCnUvM3NWNGM4RmJrQmpRUmxwMEltQVF3QTBIMm1aR2szR0dlNE1obVhMbkt0R25EMTFjdmNETENHWGN6bC9xa2MKL2xZRll6V3pkVlNzdWhialpOTUpoY2M0dENoeVZycDExU2FxbGR6VldxZ2RnNmQrSFI1NXhNMStUbytucy9DMgprZmExOVF5a3JKaTRqUFBTTVZQc2NOYVppVExwZlRNVjRDaVpWRWJuR1BYKytNZjh3V3o4bVJsRC9SbkJGcVo0CmtxYmM0MlFLYkkzZWM5MDBTRm52cVdTY0FSeS9nNHVkQzV2Uk9aSXBseVd3NUVQd0ZCZ0ZjOXdpc0VyUVB1YzcKYkN2WkRJL3RxS1EzZlJIajFBV3ZxSm9XN0xWOGQ5K2tGc2dSOU1sNnVmNjVrb0NqekZncXdJNlMvUmhCYng2ZQo4OUR6SnpINmovOG9PT0RjOWJTRjNMZVN0NEVuT2MybFpDWnFoUG1weVYwSmVYLzJpZVlxZlpNY0RvZ2ZXM21nCkVVWFE0cEFERmYvNzJOYXhLYUg4ekpKQ28vZWJleXhvN090YTVBQjVDb3NuM0ZESFV5U0hHVmdtWEhMWHp0ZDYKeHBQWTdvclFVdnlKd2tlckYzUFlVWUlXWnVmcUhqMVc0TWI5Y1dicEs5NUR4djdMRWZpUFlJU1d2R3c1Zm1sTwp0MHVvdXFCU2JwN0tBUTdzRk9XNURkaEZBQkVCQUFHSkFiWUVHQUVLQUNBV0lRU2tPT2pSckZVRmpqQVZYcERnCnhPMnpGUW5TN2dVQ1phZENKZ0liREFBS0NSRGd4TzJ6RlFuUzdxcnVDLzRsSEZxazZoSThWUjkvaTIxbExjRVEKUkU1amRIUjMwV0RseWpvemQvMVZkNmpRTTkzUzRNUWlJb25vMDR6Z2tDZjR1SUN1R2hUVUJ6ZHdlUlJSbVV5MApvcVZNeG4yL05wN01MNTVkV3hxS3lNcStFMGZqeEwvNXZXR2xFVFEyVEFyY3d0emY2d3gyYzUyc2I2bUduUWc2CjQzeFFBYXBRdi9qQW1wL0dsSTF2ejgwZnRnRkxwZ3UyVEdEWCttQUZFVFJHUTlDR1VKWE9QbGlyTXMrVWRpL2sKMHFsdGJUNWlvczZBOTFySHdtUXBxbFVMb0dRaHJpdFlJaXNEcTNCV24vSFBSaGVJNVoxSDlGR0h0aTBPdVl6RQpGUFAzRk5ZQjFOOGg2cDlRTkU2WXhLTGpEdFFZWHVtaTREOEZWVEV2NVNHVmVUVWtHUEI4VDZ5M29hK0Vtbyt5CjlPbnNkS1dQVUJKeWcyRnJhUXIvY3h2T2VZWjN6SXNjNjdHRllXWG9uZllzNk9IUHBaQ21LM0xtenh0UEhpMlAKc0ZsYkx0Mm5JbGdMVHJqajMrT1dLVTJuOC9rUlc0Z3VIQy8xY1BFdzlxQ1ZGN05teDhWaGhqVXB4NGpWVzQ0SgpFV1lOdVZSTHMvbmpZK3N4VjFBZjcvUEx6b3BvNkxkN2x1QlFtWTVBS0RzPQo9dzNzaAotLS0tLUVORCBQR1AgUFVCTElDIEtFWSBCTE9DSy0tLS0tCg==" | base64 -d | gpg --import
          gpg --trusted-key 2CE99AFEA78FFBE9F888FE81C920598F1F5CB784
          echo "$INKSTITCH_GPG_KEY" | gpg -ear gpg@lex.gd

          sudo apt-get update
          python -m pip install --upgrade pip
          python -m pip install wheel

          sudo apt-get install gettext

          # for wxPython
          sudo apt install libnotify4
          sudo apt install glib-networking libsdl2-dev libsdl2-2.0-0

          # for PyGObject
          sudo apt install libgirepository1.0-dev libcairo2-dev

          # for shapely
          sudo apt install build-essential libgtk-3-dev

          uname -a
          python --version
          python -m pip --version
          python -m pip debug

          python -m pip install pycairo
          python -m pip install PyGObject

          python -m pip install https://extras.wxpython.org/wxPython4/extras/linux/gtk3/ubuntu-20.04/wxPython-4.2.1-cp38-cp38-linux_x86_64.whl

          python -m pip install -r requirements.txt
          python -m pip install pyinstaller==5.13.2

          # scipy gives us a ELF error when stripped
          sudo apt-get install gcc g++ gfortran python3-dev libopenblas-dev liblapack-dev
          python -m pip uninstall --yes scipy
          python -m pip install scipy --no-binary scipy

          echo "${{ env.pythonLocation }}\bin" >> $GITHUB_PATH
      - shell: bash
        run: |
          make dist
        env:
          BUILD: linux
          INKSTITCH_GPG_KEY: ${{ secrets.INKSTITCH_GPG_KEY }}
      - uses: actions/upload-artifact@v3
        with:
          name: inkstitch-linux
          path: artifacts
  windows32:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: actions/setup-node@v3
        with:
          node-version: '16.x'
      - uses: actions/setup-python@v4
        with:
          python-version: '3.8.x'
          architecture: 'x86'
      - uses: microsoft/setup-msbuild@v1.3.1
      - name: install dependencies
        shell: bash
        run: |
          git config --system core.longpaths true
          python -m pip install --upgrade pip
          python -m pip install wheel
          # inkex has pillow as a requirement and defaults to the latest release.
          # for windows we need to pin to the latest possible version for 32 bit
          python -m pip install pillow==9.5.0
          # Numpy and Scipy version for older cpu compatibility
          python -m pip install numpy==1.23.1
          python -m pip install scipy==1.9.0
          pip install wxPython
          python -m pip install -r requirements.txt
          python -m pip install pyinstaller==5.13.2

          echo "${{ env.pythonLocation }}\bin" >> $GITHUB_PATH
      - shell: bash
        run: |
          make dist
        env:
          BUILD: windows
      - uses: dlemstra/code-sign-action@v1
        with:
          certificate: '${{ secrets.INKSTITCH_CODE_SIGNING_CERTIFICATE }}'
          folder: 'dist'
          recursive: true
      - shell: bash
        run: |
          bash bin/build-windows-installer
        env:
          BUILD: windows
      - uses: dlemstra/code-sign-action@v1
        with:
          certificate: '${{ secrets.INKSTITCH_CODE_SIGNING_CERTIFICATE }}'
          folder: 'artifacts'
      - uses: actions/upload-artifact@v3
        with:
          name: inkstitch-windows32
          path: artifacts
  windows64:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: actions/setup-node@v3
        with:
          node-version: '16.x'
      - uses: actions/setup-python@v4
        with:
          python-version: '3.8.x'
          architecture: 'x64'
      - uses: microsoft/setup-msbuild@v1.3.1
      - name: install dependencies
        shell: bash
        run: |
          git config --system core.longpaths true
          python -m pip install --upgrade pip
          python -m pip install wheel
          pip install wxPython
          python -m pip install -r requirements.txt
          python -m pip install pyinstaller==5.13.2

          echo "${{ env.pythonLocation }}\bin" >> $GITHUB_PATH
      - shell: bash
        run: |
          make dist
        env:
          BUILD: windows
      - uses: dlemstra/code-sign-action@v1
        with:
          certificate: '${{ secrets.INKSTITCH_CODE_SIGNING_CERTIFICATE }}'
          folder: 'dist'
          recursive: true
      - shell: bash
        run: |
          bash bin/build-windows-installer
        env:
          BUILD: windows
      - uses: dlemstra/code-sign-action@v1
        with:
          certificate: '${{ secrets.INKSTITCH_CODE_SIGNING_CERTIFICATE }}'
          folder: 'artifacts'
      - uses: actions/upload-artifact@v3
        with:
          name: inkstitch-windows64
          path: artifacts
  mac:
    runs-on: macos-12
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9.x'
      - uses: actions/setup-node@v3
        with:
          node-version: '16.x'
      - name: install dependencies
        shell: bash
        run: |
          brew update

          brew install gtk+3 pkg-config gobject-introspection geos libffi gettext jq gnu-getopt || true

          export LDFLAGS="-L/usr/local/opt/libffi/lib"
          export PKG_CONFIG_PATH="/usr/local/opt/libffi/lib/pkgconfig"

          # for msgfmt
          echo "/usr/local/opt/gettext/bin" >> $GITHUB_PATH

          echo "GI_TYPELIB_PATH=/usr/local/lib/girepository-1.0/" >> $GITHUB_ENV

          pip install --upgrade pip
          pip --version
          pip install wheel
          pip install PyGObject
          pip install wxPython
          pip install -r requirements.txt
          pip install pyinstaller==5.13.2

          echo "${{ env.pythonLocation }}/bin" >> $GITHUB_PATH
      - shell: bash
        run: |
          make dist
        env:
          BUILD: osx
          MACOS_CERTIFICATE: ${{ secrets.INKSTITCH_APPLE_DEVELOPER_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.INKSTITCH_APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PWD: ${{ secrets.KEYCHAIN_PASSWORD }}
          INSTALLER_CERTIFICATE: ${{ secrets.INKSTITCH_APPLE_INSTALLER_CERTIFICATE }}
          INSTALLER_PWD: ${{ secrets.INKSTITCH_APPLE_INSTALLER_CERTIFICATE_PASSWORD }}
          NOTARY_ACCOUNT: ${{ secrets.INKSTITCH_NOTARIZE_AC }}
          NOTARY_PASSWORD: ${{ secrets.INKSTITCH_NOTARIZE_PASS }}


      - uses: actions/upload-artifact@v3
        with:
          name: inkstitch-mac
          path: artifacts

  release:
    runs-on: ubuntu-latest
    needs: [linux, windows32, windows64, mac]
    if: always()
    steps:
      - name: determine release info
        shell: bash
        run: |
          if [[ "${GITHUB_REF}" =~ ^refs/tags/v[0-9.]+$ ]]; then
            tag="${GITHUB_REF#refs/tags/}"
            echo "release_tag=${tag}" >> $GITHUB_ENV
            echo "prerelease=false" >> $GITHUB_ENV
            echo "title=${tag}" >> $GITHUB_ENV
          else
            branch="${GITHUB_REF#refs/heads/}"
            tag="dev-build-$(echo $branch | tr / -)"
            echo "release_tag=${tag}" >> $GITHUB_ENV
            echo "prerelease=true" >> $GITHUB_ENV
            echo "title=development build of $branch" >> $GITHUB_ENV
          fi
      - name: download linux
        uses: actions/download-artifact@v3
        with:
          name: 'inkstitch-linux'
          path: 'artifacts/'
      - name: download windows32
        uses: actions/download-artifact@v3
        with:
          name: 'inkstitch-windows32'
          path: 'artifacts/'
        if: always()
      - name: download windows64
        uses: actions/download-artifact@v3
        with:
          name: 'inkstitch-windows64'
          path: 'artifacts/'
        if: always()
      - name: download mac
        uses: actions/download-artifact@v3
        with:
          name: 'inkstitch-mac'
          path: 'artifacts/'
        if: always()
      - name: create/update release
        uses: "marvinpinto/action-automatic-releases@latest"
        if: always()
        with:
          repo_token: "${{secrets.GITHUB_TOKEN}}"
          automatic_release_tag: "${{env.release_tag}}"
          prerelease: "${{env.prerelease}}"
          title: "${{env.title}}"
          files: |
            artifacts/*.exe
            artifacts/*.pkg
            artifacts/*.deb
            artifacts/*.rpm
            artifacts/*.tar.xz
            artifacts/*.sh
            artifacts/*.zip
